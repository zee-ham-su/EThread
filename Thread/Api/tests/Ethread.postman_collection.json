{
	"info": {
		"_postman_id": "d7c2e028-78f1-415f-b27e-1e2c463a68c4",
		"name": "Ethread",
		"description": "The backend API provides endpoints for managing shopping carts and products in the system. It allows users to perform operations such as adding items to carts, updating quantities, deleting items or entire carts, as well as CRUD operations on products.Post reviews and checking out.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31250987",
		"_collection_link": "https://hsufiian.postman.co/workspace/Team-Workspace~aad07fb3-a7a9-447a-8efc-1ef5354921de/collection/31250987-d7c2e028-78f1-415f-b27e-1e2c463a68c4?action=share&source=collection_link&creator=31250987"
	},
	"item": [
		{
			"name": "products",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.product.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Price is a positive number\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.product.price).to.be.a('number');",
									"  pm.expect(responseData.product.price).to.be.above(0);",
									"});",
									"",
									"",
									"pm.test(\"Quantity is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.product.quantity).to.be.a('number');",
									"  pm.expect(responseData.product.quantity).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Handmade Print Fabric Bag",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Artisan-crafted bag showcasing vibrant print fabric, combining style with traditional craftsmanship",
									"type": "text"
								},
								{
									"key": "price",
									"value": "20.99",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "4",
									"type": "text"
								},
								{
									"key": "image",
									"type": "file",
									"src": "postman-cloud:///1eeead9b-1b8d-4fb0-8694-54d186409a96"
								}
							]
						},
						"url": {
							"raw": "https://ethread.onrender.com/api/products",
							"protocol": "https",
							"host": [
								"ethread",
								"onrender",
								"com"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "\n### Add Product\nThis endpoint allows you to add a new product to the database.\n\n#### Request Body\n- `name` (text) - The name of the product.\n- `description` (text) - The description of the product.\n- `price` (text) - The price of the product.\n- `quantity` (text) - The quantity of the product available.\n- `image` (file) - The image of the product.\n\n#### Response\n- Status: 201\n- Content-Type: application/json\n- `msg` - A message indicating the result of the operation.\n- `product` - An object containing the details of the newly added product, including its name, description, price, image, quantity, ID, creation and update timestamps, and version.\n\n"
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has Content-Type header set to 'application/json; charset=utf-8'\", function () {",
									"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"Price and quantity are non-negative numbers\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(product) {",
									"    pm.expect(product.price).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(product.quantity).to.be.a('number').and.to.be.at.least(0);",
									"  });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve a list of products from the server. The response will be in JSON format and will contain an array of product objects, each including the product's ID, name, description, price, image, quantity, creation date, and update date."
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Price is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.price).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative number\");",
									"});",
									"",
									"",
									"pm.test(\"Quantity is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.quantity).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.quantity).to.be.at.least(0, \"Quantity should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/products/6601c681ca8319e517afddfc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products",
								"6601c681ca8319e517afddfc"
							]
						},
						"description": "This endpoint makes an HTTP GET request to retrieve details of a specific product by its ID. The response will be in JSON format and will include the product's ID, name, description, price, image, quantity, creation date, and update date."
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'msg' field is a string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.msg).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Price is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.product.price).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Quantity is a non-negative number\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.product).to.exist;",
									"  pm.expect(responseData.product.quantity).to.be.a('number');",
									"  pm.expect(responseData.product.quantity).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": 70.85,\r\n    \"quantity\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/products/6601c681ca8319e517afddfc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products",
								"6601c681ca8319e517afddfc"
							]
						},
						"description": "## Update Product\n\nThis endpoint is used to update a specific product by making an HTTP PUT request to the specified URL.\n\n### Request Body\n\n- The request body should be in raw format with the following parameters:\n    - `price` (number): The updated price of the product.\n    - `quantity` (number): The updated quantity of the product.\n\n### Response\n\nUpon a successful update, the server will respond with a status code of 200 and a JSON object containing the updated product information.\n\n- `msg` (string): A message indicating the status of the update.\n- `product` (object): An object containing the updated product details including its ID, name, description, price, image, quantity, creation and update timestamps, and version.\n    \n\nExample:\n\n``` json\n{\n  \"msg\": \"\",\n  \"product\": {\n    \"_id\": \"\",\n    \"name\": \"\",\n    \"description\": \"\",\n    \"price\": 0,\n    \"image\": \"\",\n    \"quantity\": 0,\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"__v\": 0\n  }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is 'application/json'\", function () {",
									"    var contentType = pm.response.headers.get(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response has the required field 'msg'\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.msg).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"The 'msg' field value should be a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.msg).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/products/6602b49a48dd97c7da9fcb49",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"products",
								"6602b49a48dd97c7da9fcb49"
							]
						},
						"description": "This endpoint makes an HTTP DELETE request to delete a specific product with the given ID. Upon successful deletion, it returns a 200 status with an empty JSON response containing a message indicating the success of the deletion."
					},
					"response": []
				}
			],
			"description": "These endpoints manage product information, allowing users to retrieve details and add new items, update products information and delete too."
		},
		{
			"name": "carts",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.totalPrice).to.exist;",
									"    pm.expect(responseData._id).to.exist;",
									"    pm.expect(responseData.items).to.exist;",
									"    pm.expect(responseData.createdAt).to.exist;",
									"    pm.expect(responseData.updatedAt).to.exist;",
									"    pm.expect(responseData.__v).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Total price should be a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.totalPrice).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"The _id should be a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Items is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.items).to.be.an('array').that.has.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"items\": [\r\n        {\r\n            \"productId\": \"6601c964ca8319e517afde05\",\r\n            \"quantity\": 4\r\n        },\r\n        {\r\n            \"productId\": \"6601c82dca8319e517afde00\",\r\n            \"quantity\": 5\r\n        }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/carts/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"carts",
								"add"
							]
						},
						"description": "This endpoint allows you to add items to a cart.\n\n### Request Body\n\n- The request should be sent as an HTTP POST to `http://localhost:3000/api/carts/add`.\n- The request body should be in raw JSON format and should include an array of items, where each item contains the `productId` and `quantity`.\n    \n\nExample:\n\n``` json\n{\n    \"items\": [\n        {\n            \"productId\": \"string\",\n            \"quantity\": 0\n        }\n    ]\n}\n\n ```\n\n### Response\n\n- Upon successful execution, the endpoint returns a status code of 201 and a JSON object with the following fields:\n    - `totalPrice`: The total price of the items in the cart.\n    - `_id`: The ID of the cart.\n    - `items`: An array containing the details of the items added, including the product, quantity, and item ID.\n    - `createdAt`: The timestamp of when the cart was created.\n    - `updatedAt`: The timestamp of when the cart was last updated.\n    - `__v`: Version control field.\n\nExample Response:\n\n``` json\n{\n    \"totalPrice\": 0,\n    \"_id\": \"string\",\n    \"items\": [\n        {\n            \"product\": \"string\",\n            \"quantity\": 0,\n            \"_id\": \"string\"\n        }\n    ],\n    \"createdAt\": \"string\",\n    \"updatedAt\": \"string\",\n    \"__v\": 0\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the presence of 'items' array in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData).to.have.lengthOf.at.least(1, \"'items' array should not be empty\");",
									"    ",
									"    responseData.forEach(function (cart) {",
									"        pm.expect(cart.items).to.exist.and.to.be.an('array');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/carts/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"carts",
								""
							]
						},
						"description": "This endpoint retrieves a list of carts via an HTTP GET request to the specified URL. The response will be in JSON format and will include an array of cart objects, each containing an ID, total price, items with product details and quantity, creation and update timestamps, and a version attribute."
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData._id).to.exist;",
									"  pm.expect(responseData.totalPrice).to.exist;",
									"  pm.expect(responseData.items).to.exist;",
									"  pm.expect(responseData.createdAt).to.exist;",
									"  pm.expect(responseData.updatedAt).to.exist;",
									"  pm.expect(responseData.__v).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'items' array is present and contains at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.items).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"cartId\": \"6601cdfeb2cfff3907c2bacc\",\r\n  \"itemId\": \"6601cdfeb2cfff3907c2bace\",\r\n  \"quantity\": 2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/carts/update",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"carts",
								"update"
							]
						},
						"description": "This endpoint makes an HTTP PUT request to update a cart at the specified URL. The request should include the cartId, itemId, and the quantity to be updated.\n\n### Request Body\n\n- `cartId` (string) - The ID of the cart to be updated.\n- `itemId` (string) - The ID of the item to be updated.\n- `quantity` (number) - The new quantity of the item.\n    \n\n### Response\n\nUpon successful execution, the endpoint returns a status code of 200 and a JSON object with the updated cart details, including the cart ID, total price, a list of items with their quantities, creation and update timestamps, and version information.\n\nExample Response:\n\n``` json\n{\n    \"_id\": \"\",\n    \"totalPrice\": 0,\n    \"items\": [\n        {\n            \"product\": \"\",\n            \"quantity\": 0,\n            \"_id\": \"\"\n        }\n    ],\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"__v\": 0\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response includes a message\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The deleted cart ID should not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.deletedCart._id).to.exist.and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/carts/6602b6207226c4690afb358c",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"carts",
								"6602b6207226c4690afb358c"
							]
						},
						"description": "This endpoint sends an HTTP DELETE request to remove a specific cart with the given ID. The response will have a status code of 200, and the content type will be in JSON format. The response will include a message and the details of the deleted cart, including its ID, total price, items with their product details and quantities, creation and update timestamps, and a version key."
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.cart).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Items array in the cart is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.cart).to.be.an('object');",
									"  pm.expect(responseData.cart.items).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Items array should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Each item in the items array has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.cart).to.be.an('object');",
									"    pm.expect(responseData.cart.items).to.be.an('array');",
									"",
									"    responseData.cart.items.forEach(function (item) {",
									"        pm.expect(item).to.have.property('product').that.is.a('string');",
									"        pm.expect(item).to.have.property('quantity').that.is.a('number');",
									"        pm.expect(item).to.have.property('_id').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/carts/6602b6207226c4690afb3589/items/6602b6207226c4690afb35c4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"carts",
								"6602b6207226c4690afb3589",
								"items",
								"6602b6207226c4690afb35c4"
							]
						},
						"description": "This endpoint sends an HTTP DELETE request to remove a specific item from a cart. Upon successful execution, it returns a 200 status code with a JSON response containing a message and the updated cart details, including the total price and the list of items in the cart.\n\nThe response JSON structure is as follows:\n\n- message: A string indicating the status of the operation.\n- cart: An object containing the updated cart details.\n    - _id: The unique identifier of the cart.\n    - totalPrice: The total price of all items in the cart.\n    - items: An array of objects representing the items in the cart.\n        - product: The product identifier.\n        - quantity: The quantity of the product in the cart.\n        - _id: The unique identifier of the item in the cart.\n    - createdAt: The timestamp of the cart's creation.\n    - updatedAt: The timestamp of the cart's last update.\n    - __v: Version control field.\n\nNo request body parameters are mentioned for this endpoint."
					},
					"response": []
				}
			],
			"description": "Organizes cart routes, facilitating efficient navigation and management of API endpoints for cart functionality"
		},
		{
			"name": "checkout",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - success and message\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.success).to.exist;",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Success is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.success).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"cartId\": \"6601ce1fb2cfff3907c2bad2\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/checkouts/checkout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"checkouts",
								"checkout"
							]
						},
						"description": "This endpoint allows you to create a checkout for a specific cart.\n\n### Request Body\n\n- `cartId` (string) - The ID of the cart for which the checkout is being created.\n    \n\nExample:\n\n``` json\n{\n    \"cartId\": \"sampleCartId\"\n}\n\n ```\n\n### Response\n\n- Status: 200\n- Content-Type: application/json\n    \n\nExample:\n\n``` json\n{\n    \"success\": true,\n    \"message\": \"\"\n}\n\n ```"
					},
					"response": []
				}
			],
			"description": "Housing API routes for seamless cart checking out within the application."
		},
		{
			"name": "review",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.product).to.exist;",
									"  pm.expect(responseData.rating).to.exist;",
									"  pm.expect(responseData.comment).to.exist;",
									"  pm.expect(responseData._id).to.exist;",
									"  pm.expect(responseData.createdAt).to.exist;",
									"  pm.expect(responseData.updatedAt).to.exist;",
									"  pm.expect(responseData.__v).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Product ID is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.product).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Rating should be a number between 0 and 5\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.rating).to.be.a('number');",
									"    pm.expect(responseData.rating).to.be.within(0, 5);",
									"});",
									"",
									"",
									"pm.test(\"Comment is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.comment).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Comment should not be empty\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"productId\": \"6601c8d9ca8319e517afde03\",\r\n  \"rating\": 5,\r\n  \"comment\": \"This bag is my new favorite travel companion! It's stylish, spacious, and the print adds a fun pop of color to my outfits.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/reviews",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"reviews"
							]
						},
						"description": "This endpoint allows you to submit a new review for a product. The HTTP POST request should be sent to [http://localhost:3000/api/reviews](http://localhost:3000/api/reviews) with the required parameters in the request body.\n\n### Request Body\n\n- `productId` (string): The ID of the product for which the review is being submitted.\n- `rating` (number): The rating given to the product.\n- `comment` (string): The comment or review text.\n    \n\n### Response\n\nUpon successful submission, the server will respond with a status code of 201 and a JSON object containing the details of the submitted review, including the product, rating, comment, unique identifier, creation and update timestamps, and version.\n\nExample:\n\n``` json\n{\n    \"product\": \"\",\n    \"rating\": 0,\n    \"comment\": \"\",\n    \"_id\": \"\",\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\",\n    \"__v\": 0\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has content type of application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Rating is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"",
									"    responseData.forEach(function(review) {",
									"        pm.expect(review.rating).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://ethread.onrender.com/api/reviews/6601c8d9ca8319e517afde03",
							"protocol": "https",
							"host": [
								"ethread",
								"onrender",
								"com"
							],
							"path": [
								"api",
								"reviews",
								"6601c8d9ca8319e517afde03"
							]
						},
						"description": "\nThis endpoint retrieves the review details for a specific product by making an HTTP GET request to the provided URL. The response will have a status code of 200 and a content type of application/json. The response will include an array of review objects, each containing the review ID, product ID, rating, comment, creation date, update date, and a version key.\n"
					},
					"response": []
				}
			],
			"description": "Houses Review API endpoints"
		}
	]
}